WITH RECURSIVE EmployeeHierarchy AS (
    -- Базовый случай: Иван Иванов (EmployeeID = 1)
    SELECT
        e.EmployeeID,
        e.Name AS EmployeeName,
        e.ManagerID,
        d.DepartmentName,
        r.RoleName
    FROM Employees e
    JOIN Departments d ON e.DepartmentID = d.DepartmentID
    JOIN Roles r ON e.RoleID = r.RoleID
    WHERE e.EmployeeID = 1

    UNION ALL

    -- Рекурсивное объединение: поиск подчиненных
    SELECT
        e.EmployeeID,
        e.Name AS EmployeeName,
        e.ManagerID,
        d.DepartmentName,
        r.RoleName
    FROM Employees e
    JOIN Departments d ON e.DepartmentID = d.DepartmentID
    JOIN Roles r ON e.RoleID = r.RoleID
    JOIN EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
)

SELECT
    eh.EmployeeID,
    eh.EmployeeName,
    eh.ManagerID,
    eh.DepartmentName,
    eh.RoleName,
    -- Объединение всех проектов через запятую
    COALESCE(GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', '), NULL) AS ProjectNames,
    -- Объединение всех задач через запятую
    COALESCE(GROUP_CONCAT(DISTINCT t.TaskName ORDER BY t.TaskName SEPARATOR ', '), NULL) AS TaskNames
FROM EmployeeHierarchy eh
LEFT JOIN Projects p ON p.DepartmentID = (
    SELECT DepartmentID FROM Employees e WHERE e.EmployeeID = eh.EmployeeID
)
LEFT JOIN Tasks t ON t.AssignedTo = eh.EmployeeID
GROUP BY eh.EmployeeID, eh.EmployeeName, eh.ManagerID, eh.DepartmentName, eh.RoleName
ORDER BY eh.EmployeeName;

Как работает запрос:
Рекурсивный CTE (EmployeeHierarchy):

Базовый случай: включает Ивана Иванова (EmployeeID = 1).

Рекурсивная часть: добавляет всех сотрудников, у которых
ManagerID соответствует уже найденным сотрудникам.

Главный запрос:

Присоединяет проекты по отделу сотрудника.

Присоединяет задачи, назначенные сотруднику.

Группирует и объединяет названия проектов и задач через GROUP_CONCAT.

Сортирует результат по имени сотрудника.